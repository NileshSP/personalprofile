import { timestamp, files, shell, routes } from '@sapper/service-worker';

const ASSETS = `NileshProfile${timestamp}`;

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = shell.concat(files);
const cached = new Set(to_cache);

self.addEventListener('install', event => {
	event.waitUntil(
		caches
			.open(ASSETS)
			.then(cache => cache.addAll(to_cache))
			.then(() => {
				self.skipWaiting()
			})
	);
});

self.addEventListener('activate', event => {
	event.waitUntil(
		caches.keys().then(async keys => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			self.clients.claim();
		})
	);
});

/* eslint-disable no-undef */
/* eslint-disable no-restricted-globals */
importScripts('https://storage.googleapis.com/workbox-cdn/releases/4.1.1/workbox-sw.js');

const { strategies, backgroundSync, cacheableResponse } = workbox;
const publicUrl = `http`;//`${self.location.origin}`;
//console.log(`public url: ${publicUrl}`)
const bgSyncPlugin = new backgroundSync.Plugin('NileshProfileFetchQueue', {
  maxRetentionTime: 24 * 60 // Retry for max of 24 Hours
});
const strategyToApply = new strategies.StaleWhileRevalidate({
  cacheName: ASSETS,
  plugins:[
    bgSyncPlugin,
    // cacheableResponse.Plugin({
    //   statuses: [0,200]
    // })
  ]
});

workbox.core.skipWaiting();

workbox.core.clientsClaim();

workbox.routing.registerRoute(
  new RegExp(`${publicUrl}`,'i'),
  strategyToApply
);

self.addEventListener('fetch', (event) => {
  event.respondWith(strategyToApply.makeRequest({request: event.request}));
});