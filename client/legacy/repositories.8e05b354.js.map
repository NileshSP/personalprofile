{"version":3,"file":"repositories.8e05b354.js","sources":["../../../../node_modules/@babel/runtime/helpers/esm/objectSpread.js","../../../../src/components/listrepositories.svelte","../../../../src/routes/repositories.svelte"],"sourcesContent":["import defineProperty from \"./defineProperty\";\nexport default function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}","<script>\n\t//import VirtualList from '@sveltejs/svelte-virtual-list';\n  import { fade, fly } from 'svelte/transition';\n  import { onMount } from \"svelte\";\n  \n  export let repositories = {}, preloadRepositories = {};\n  let repositoryYear = null;\n  let position = \"\", flyIn = \"\";\n  const duration = 2000;\n\n  onMount(() => {\n    repositories = preloadRepositories;\n  })\n\n  const getReadableDate = (dateVal) => { \n    const dateValue = (new Date(dateVal));\n    return `${dateValue.getDate()} ${dateValue.toLocaleString('en-us', { month: 'short' })} ${dateValue.getFullYear()}`\n  }\n\n  const getPositionClass = (val) => val % 2 === 0 ? \"left\" : \"right\"\n  const getItemTransition = (val) => (getPositionClass(val) === 'left' ? { x: -100, duration: duration } : { x: 100, duration: duration })\n  const showYear = (dateVal) => {\n    const newYear = (new Date(dateVal)).getFullYear();\n    if (repositoryYear === null || repositoryYear !== newYear) {\n      repositoryYear = newYear;\n      return true;\n    } \n    else {\n      return false;\n    }\n  }  \n\n</script>\n  <h2 in:fly={{ y: -100, duration: 2000 }} out:fade>[...github repositories]</h2>\n  <div class=\"main\" out:fade>\n    <div class=\"timeline\">\n      {#if repositories.length > 0}\n        <!-- <VirtualList height=\"74vh\" items={repositories} let:item > -->\n        {#each repositories as item}\n          {#if showYear(item.contribution.createdAt || item.createdat)}\n            <div class=\"containerYear\" data-content={(new Date(item.contribution.createdAt || item.createdat)).getFullYear()} in:fly=\"{{ y: -300, duration: duration }}\">\n            </div>\n          {/if}\n          <div class={\"container \" + getPositionClass(item.index)} data-content={(new Date(item.contribution.createdAt || item.createdat)).toLocaleString('en-us', { month: 'short' })}>\n            <div class={\"content \"} in:fly={getItemTransition(item.index)} >\n              <h3><a rel=\"noopener, preconnect\" href={item.url} target=\"_blank\">{item.nameWithOwner}</a></h3>\n              {#if item.contribution.type}\n                <p>\n                  contributed with {item.contribution.type}: <a rel=\"noopener, preconnect\" href={item.contribution.url} target=\"_blank\" >{item.contribution.title}</a>\n                </p>\n              {:else}\n                <p>\n                  created project: {item.description}\n                </p>\n              {/if}  \n              <span class=\"topics\">{item.topics.concat(item.languages).join(\", \")}</span>\n              <div class=\"contentFooter\">\n                <div>\n                  {#if item.demourl !== \"\" } <a rel=\"noopener, preconnect\" href={item.demourl} target=\"_blank\" >demo</a>{/if}\n                </div>\n                <div>\n                  <i>initiated @ {getReadableDate(item.contribution.createdAt || item.createdat)}</i>\n                </div>\n              </div>\n            </div>\n          </div>\n        {/each}\n        <!-- </VirtualList> -->\n      {/if}\n    </div>\n  </div>\n<style>\n:root {\n  --shadowValue : 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n* {\n  margin:0;\n  padding:0;\n  box-sizing: border-box;\n  font-family: Helvetica, sans-serif;\n  background-color: inherit; \n}\nh2 {\n  padding: 5% 0 0 10%;\n  background: linear-gradient(180deg, orange , red);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\na {\n  color: rgb(0,100,200);\n  text-decoration: none;\n  cursor:hand;\n}\na:hover {\n  text-decoration: underline;\n}\na:visited {\n  color: rgb(0,80,160);\n}\n.main {\n  padding:50px 0px;\n  margin: 0 auto;\n  max-width: 800px;\n  border:solid 0px red;\n}\n\n/* The actual timeline (the vertical ruler) */\n.timeline {\n  position: relative;\n  margin: 0 auto;\n}\n\n/* The actual timeline (the vertical ruler) */\n.timeline::after {\n  content: '';\n  position: absolute;\n  width: 6px;\n  background-color: white;\n  top: 0;\n  bottom: 0;\n  left: 50%;\n  margin-left: -3px;\n  box-shadow: var(--shadowValue);\n}\n\n.containerYear {\n  padding: 60px 60px;\n  position: relative;\n  width: 50%;\n  z-index: 1;\n  color:black;\n  background-color: transparent;\n}\n/* The circles on the timeline */\n.containerYear::after {\n  content: attr(data-content);\n  position: absolute;\n  width: 45px;\n  height: 45px;\n  right: -26px;\n  background-color: white;\n  border: 4px solid orange;\n  top: 30px;\n  border-radius: 50%;\n  z-index: 1;\n  display:grid;\n  place-content: center;\n  font-weight: bold;\n  box-shadow: var(--shadowValue);\n}\n\n/* Container around content */\n.container {\n  padding: 3px 25px;\n  position: relative;\n  background-color: inherit;\n  width: 50%;\n}\n\n/* The circles on the timeline */\n.container::after {\n  content: attr(data-content);\n  position: absolute;\n  width: 25px;\n  height: 25px;\n  right: -17px;\n  background-color: white;\n  border: 4px solid steelblue;\n  top: 30px;\n  border-radius: 50%;\n  z-index: 1;\n  display:grid;\n  place-content: center;\n  font-weight: bold;\n  font-size: 8pt;\n  box-shadow: var(--shadowValue);\n}\n\n/* Place the container to the left */\n.left {\n  left: 0;\n}\n\n/* Place the container to the right */\n.right {\n  left: 50%;\n}\n\n.topics {\n  font-size: 90%;\n  color:brown;\n}\n\n/* Fix the circle for containers on the right side */\n.right::after {\n  left: -16px;\n}\n\n/* The actual content */\n.content {\n  padding: 15px 15px 15px 15px;\n  background-color: white;\n  position: relative;\n  border-radius: 10px;\n  border: solid 0px orange;\n  font-family: tahoma;\n  font-size: 9pt; \n  box-shadow: var(--shadowValue);\n  display: grid;\n  grid-gap: 15px;\n}\n\n.contentFooter {\n  background-color: transparent;\n  display:grid;\n  grid-auto-flow: column;\n  justify-content: space-between;  \n}\n\n.content > div > div, p, h3, a, i {\n  background-color: transparent;\n  overflow: hidden;\n  text-overflow: ellipsis; \n}\n\n/* Media queries - Responsive timeline on screens less than 600px wide */\n@media screen and (max-width: 600px) {\n\n  /* Place the timelime to the left */\n  .timeline::after {\n    left: 25px;\n  }\n  \n  .containerYear {\n    width:52%;\n  }\n\n  /* Full-width containers */\n  .container {\n    width: 99%;\n    padding-left: 50px;\n    padding-right: 25px;\n  }\n  \n  /* Make sure that all arrows are pointing leftwards */\n  /* .container::before {\n    left: 60px;\n    border: medium solid white;\n    border-width: 10px 10px 10px 0;\n    border-color: transparent white transparent transparent;\n  } */\n\n  /* Make sure all circles are at the same spot */\n  .left::after, .right::after {\n    left: 9px;\n  }\n  \n  /* Make all right containers behave like the left ones */\n  .right {\n    left: 0%;\n  }\n}\n</style>","<script context=\"module\">\n  export async function preload({ params, query }) {\n      const getAccessToken = await this.fetch(`https://gist.githubusercontent.com/NileshSP/19bbe3945375eb10d625a980f0da93a1/raw/cc1de90d2ffe796efd6168f31b99178a650d91db/tokens.json`, {\n        method:'GET',\n        mode: 'cors'      \n      });\n      const accessToken = await getAccessToken.json(), \n      user = \"nileshsp\", items = 50, fork = false, fromdate = \"2019-01-01T00:00:00Z\",\n      repoQuery = `\n        query ($user: String!, $items: Int!, $fork: Boolean!, $fromdate: DateTime!) {\n          getRequestRepos: user(login: $user) {\n            repositories(first: $items, isFork: $fork) {\n              nodes {\n                ...repository       \n              }\n            }\n            contributionsCollection(from: $fromdate ) {\n              issueContributions( first: $items, orderBy: { field : OCCURRED_AT, direction: DESC}) {\n                nodes {\n                  issue {\n                    title\n                    url\n                    createdAt\n                    closed\n                    repository {\n                      ...repository\n                    }\n                  }\n                }\n              }\n              pullRequestContributions( first: $items, excludeFirst:true, orderBy: { field : OCCURRED_AT, direction: DESC}) {\n                nodes {\n                  pullRequest {\n                    title\n                    url\n                    createdAt\n                    merged\n                    repository {\n                      ...repository\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        fragment repository on Repository {\n            id\n            name\n            nameWithOwner\n            url\n            description\n            createdAt\n            updatedAt\n            homepageUrl\n            languages(first: $items) {\n              nodes {\n                name\n              }\n            }\n            repositoryTopics(first: $items) {\n              nodes {\n                topic {\n                  name\n                }\n              }\n            }\n        }\n      `;\n      return this.fetch(\"https://api.github.com/graphql\", {\n        method:'POST'\n        ,'headers':{\n            'content-type':\"application/json\"\n            ,'Authorization': `bearer ${accessToken.githubAccessToken}`,\n        }\n        ,'body': JSON.stringify({\n          query: repoQuery,\n          variables: { user, items, fork, fromdate }\n        })\n        ,'mode':\"cors\"\n      })\n      .then(response => response.json())\n      .then(data => {\n        let preloadRepositories = [];\n        if(data.message) {\n          console.error(`github response`,data.message);\n          return { preloadRepositories };\n        }\n        if(data !== null &&  data !== undefined) { \n          const listRepo = (contribution, r) => ({\n            contribution\n            , id: r.id\n            , name: r.name\n            , nameWithOwner: r.nameWithOwner\n            , url: r.url\n            , description: r.description \n            , createdat: r.createdAt\n            , updatedat: r.updatedAt\n            , demourl:((r.homepageUrl !== null || undefined) \n                          ? (r.homepageUrl.toString().trim() !== (\"null\" || \"\") ? r.homepageUrl : \"\")\n                          : \"\"\n                      ) \n            , languages: r.languages.nodes.map(x => x.name)\n            , topics: r.repositoryTopics.nodes.map(x => x.topic.name)\n          })\n          \n          //append repositories\n          preloadRepositories = [...preloadRepositories\n                                  , ...data.data.getRequestRepos.repositories.nodes\n                                      .map(r => listRepo({ type:null, title: null, url: null, createdAt:null, state: null }, r))\n                                  //append issues conributed to repositories\n                                  , ...data.data.getRequestRepos.contributionsCollection.issueContributions.nodes\n                                      .map(r => listRepo({ type: \"issue\", title: r.issue.title, url: r.issue.url, createdAt: r.issue.createdAt, state: r.issue.closed}, r.issue.repository))\n                                  //append pull request conributed to repositories\n                                  , ...data.data.getRequestRepos.contributionsCollection.pullRequestContributions.nodes\n                                      .map(r => listRepo({ type: \"pull request\", title: r.pullRequest.title, url: r.pullRequest.url, createdAt: r.pullRequest.createdAt, state: r.pullRequest.merged }, r.pullRequest.repository))\n                                ].sort(function(a, b) {\n                                    const dateA = new Date(a.contribution.createdAt || a.createdat), dateB = new Date(b.contribution.createdAt || b.createdat);\n                                    return dateB - dateA;\n                                }).map((r,i) => { \n                                  // append index\n                                  return { ...r, index:i}; \n                                });\n          //console.info(preloadRepositories);\n        }\n        else {\n          console.log(`Github API responded with irrelevant data : `,data)\n        }\n        return { preloadRepositories };\n    })  \n    .catch (error => {\n      console.error(`Error is : ${error}`);      \n    });\n  }\n</script>\n<script>\nimport ListRepositories from \"../components/listrepositories.svelte\";\nexport let preloadRepositories;\n</script>\n<svelte:head>\n\t<title>Nilesh - Repositories</title>\n</svelte:head>\n<ListRepositories preloadRepositories={preloadRepositories} ></ListRepositories>"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","defineProperty","repositories","Date","item","contribution","createdAt","createdat","getFullYear","y","duration","description","type","title","url","demourl","nameWithOwner","topics","languages","join","getReadableDate","showYear","getPositionClass","index","toLocaleString","month","getItemTransition","preloadRepositories","repositoryYear","onMount","val","dateVal","dateValue","getDate","x","newYear","preload","params","query","this","fetch","method","mode","getAccessToken","json","accessToken","githubAccessToken","JSON","stringify","variables","user","items","fork","fromdate","then","response","data","message","console","error","listRepo","r","id","name","updatedat","updatedAt","homepageUrl","toString","trim","nodes","map","repositoryTopics","topic","getRequestRepos","state","contributionsCollection","issueContributions","issue","closed","repository","pullRequestContributions","pullRequest","merged","sort","a","b","dateA","log","catch"],"mappings":"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"}